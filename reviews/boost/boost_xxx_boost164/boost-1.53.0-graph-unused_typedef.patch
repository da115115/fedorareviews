diff -urp boost_1_54_0-orig/boost/graph/breadth_first_search.hpp boost_1_54_0/boost/graph/breadth_first_search.hpp
--- boost_1_54_0-orig/boost/graph/breadth_first_search.hpp	2013-07-23 00:47:43.418886551 +0200
+++ boost_1_54_0/boost/graph/breadth_first_search.hpp	2013-07-23 00:50:40.339958756 +0200
@@ -64,7 +64,6 @@ namespace boost {
     BOOST_CONCEPT_ASSERT(( IncidenceGraphConcept<IncidenceGraph> ));
     typedef graph_traits<IncidenceGraph> GTraits;
     typedef typename GTraits::vertex_descriptor Vertex;
-    typedef typename GTraits::edge_descriptor Edge;
     BOOST_CONCEPT_ASSERT(( BFSVisitorConcept<BFSVisitor, IncidenceGraph> ));
     BOOST_CONCEPT_ASSERT(( ReadWritePropertyMapConcept<ColorMap, Vertex> ));
     typedef typename property_traits<ColorMap>::value_type ColorValue;
diff -urp boost_1_53_0-orig/boost/graph/compressed_sparse_row_graph.hpp boost_1_53_0/boost/graph/compressed_sparse_row_graph.hpp
--- boost_1_53_0-orig/boost/graph/compressed_sparse_row_graph.hpp	2013-07-23 01:32:19.273266030 +0200
+++ boost_1_53_0/boost/graph/compressed_sparse_row_graph.hpp	2013-07-23 01:34:15.202970721 +0200
@@ -642,8 +642,6 @@ class compressed_sparse_row_graph<direct
                      const GlobalToLocal& global_to_local) {
     typedef compressed_sparse_row_graph Graph;
     typedef typename boost::graph_traits<Graph>::vertex_descriptor vertex_t;
-    typedef typename boost::graph_traits<Graph>::vertices_size_type vertex_num;
-    typedef typename boost::graph_traits<Graph>::edges_size_type edge_num;
     typedef std::vector<std::pair<vertex_t, vertex_t> > edge_vector_t;
     edge_vector_t new_edges(first, last);
     if (new_edges.empty()) return;
@@ -666,8 +664,6 @@ class compressed_sparse_row_graph<direct
                      const GlobalToLocal& global_to_local) {
     typedef compressed_sparse_row_graph Graph;
     typedef typename boost::graph_traits<Graph>::vertex_descriptor vertex_t;
-    typedef typename boost::graph_traits<Graph>::vertices_size_type vertex_num;
-    typedef typename boost::graph_traits<Graph>::edges_size_type edge_num;
     typedef std::pair<vertex_t, vertex_t> vertex_pair;
     typedef std::vector<
               boost::tuple<vertex_pair,
@@ -1164,7 +1160,6 @@ inline std::pair<typename BOOST_BIDIR_CS
                  typename BOOST_BIDIR_CSR_GRAPH_TYPE::in_edge_iterator>
 in_edges(Vertex v, const BOOST_BIDIR_CSR_GRAPH_TYPE& g)
 {
-  typedef typename BOOST_BIDIR_CSR_GRAPH_TYPE::edge_descriptor ed;
   typedef typename BOOST_BIDIR_CSR_GRAPH_TYPE::in_edge_iterator it;
   EdgeIndex v_row_start = g.m_backward.m_rowstart[v];
   EdgeIndex next_row_start = g.m_backward.m_rowstart[v + 1];
@@ -1368,7 +1363,6 @@ put(Tag tag,
     typename property_map<BOOST_CSR_GRAPH_TYPE, Tag>::key_type k,
     typename lookup_one_property<typename property_map<BOOST_CSR_GRAPH_TYPE, Tag>::plist_type, Tag>::type val) {
   typedef typename property_map<BOOST_CSR_GRAPH_TYPE, Tag>::all_tag all_tag;
-  typedef typename property_map<BOOST_CSR_GRAPH_TYPE, all_tag>::type outer_pm;
   lookup_one_property<typename property_map<BOOST_CSR_GRAPH_TYPE, Tag>::plist_type, Tag>::lookup(get(all_tag(), g, k), tag) = val;
 }
 
diff -urp boost_1_53_0-orig/boost/graph/detail/adjacency_list.hpp boost_1_53_0/boost/graph/detail/adjacency_list.hpp
--- boost_1_53_0-orig/boost/graph/detail/adjacency_list.hpp	2013-07-23 01:32:19.390266741 +0200
+++ boost_1_53_0/boost/graph/detail/adjacency_list.hpp	2013-07-23 01:34:15.275971164 +0200
@@ -634,7 +634,6 @@ namespace boost {
                     directed_graph_helper<Config>& g_)
     {
       typedef typename Config::graph_type graph_type;
-      typedef typename Config::edge_parallel_category Cat;
       graph_type& g = static_cast<graph_type&>(g_);
       g.out_edge_list(u).clear();
       // clear() should be a req of Sequence and AssociativeContainer,
@@ -781,7 +780,6 @@ namespace boost {
         typedef typename Graph::global_edgelist_selector EdgeListS;
         BOOST_STATIC_ASSERT((!is_same<EdgeListS, vecS>::value));
 
-        typedef typename EdgeList::value_type StoredEdge;
         typename EdgeList::iterator i = el.begin(), end = el.end();
         for (; i != end; ++i) {
           if ((*i).get_target() == v) {
@@ -986,7 +984,6 @@ namespace boost {
       BOOST_STATIC_ASSERT((!is_same<EdgeListS, vecS>::value));
 
       typedef typename Config::graph_type graph_type;
-      typedef typename Config::edge_parallel_category Cat;
       graph_type& g = static_cast<graph_type&>(g_);
       while (true) {
         typename Config::out_edge_iterator ei, ei_end;
@@ -1588,7 +1585,6 @@ namespace boost {
       typedef typename Config::graph_type Graph;
       typedef typename Config::StoredEdge StoredEdge;
       const Graph& cg = static_cast<const Graph&>(g_);
-      typedef typename Config::out_edge_iterator out_edge_iterator;
       const typename Config::OutEdgeList& el = cg.out_edge_list(u);
       typename Config::OutEdgeList::const_iterator it = graph_detail::
         find(el, StoredEdge(v));
diff -urp boost_1_53_0-orig/boost/graph/detail/compressed_sparse_row_struct.hpp boost_1_53_0/boost/graph/detail/compressed_sparse_row_struct.hpp
--- boost_1_53_0-orig/boost/graph/detail/compressed_sparse_row_struct.hpp	2013-07-23 01:32:19.395266772 +0200
+++ boost_1_53_0/boost/graph/detail/compressed_sparse_row_struct.hpp	2013-07-23 01:34:15.278971182 +0200
@@ -218,8 +218,6 @@ namespace detail {
       // the user has supplied the number of edges.
       edges_size_type numedges = numedges_or_zero;
       if (numedges == 0) {
-        typedef typename std::iterator_traits<InputIterator>::iterator_category
-          category;
         numedges = boost::graph::detail::reserve_count_for_single_pass(edge_begin, edge_end);
       }
       m_column.clear();
@@ -313,7 +311,6 @@ namespace detail {
       inherited_edge_properties::resize(numedges);
       EdgeIndex current_edge = 0;
       typedef typename boost::graph_traits<Graph>::vertex_descriptor g_vertex;
-      typedef typename boost::graph_traits<Graph>::edge_descriptor g_edge;
       typedef typename boost::graph_traits<Graph>::out_edge_iterator
         g_out_edge_iter;
 
@@ -347,7 +344,6 @@ namespace detail {
       // Flip sequence
       BidirectionalIterator first(last_sorted);
       BidirectionalIterator last(first_sorted);
-      typedef Vertex vertex_t;
       typedef Vertex vertex_num;
       typedef EdgeIndex edge_num;
       edge_num new_edge_count = std::distance(first, last);
diff -urp boost_1_53_0-orig/boost/graph/detail/histogram_sort.hpp boost_1_53_0/boost/graph/detail/histogram_sort.hpp
--- boost_1_53_0-orig/boost/graph/detail/histogram_sort.hpp	2013-07-23 01:32:19.364266583 +0200
+++ boost_1_53_0/boost/graph/detail/histogram_sort.hpp	2013-07-23 01:34:15.279971188 +0200
@@ -159,7 +159,6 @@ histogram_sort_inplace(KeyIterator key_b
                        Value1Iter values1,
                        KeyTransform key_transform) {
 
-  typedef NumKeys vertices_size_type;
   typedef typename std::iterator_traits<RowstartIterator>::value_type EdgeIndex;
 
   // 1. Copy m_rowstart (except last element) to get insert positions
@@ -194,7 +193,6 @@ histogram_sort_inplace(KeyIterator key_b
                        Value2Iter values2,
                        KeyTransform key_transform) {
 
-  typedef NumKeys vertices_size_type;
   typedef typename std::iterator_traits<RowstartIterator>::value_type EdgeIndex;
 
   // 1. Copy m_rowstart (except last element) to get insert positions
